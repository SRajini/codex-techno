TASK 1:
Iris flower has three species; setosa, versicolor, and virginica, which differs
according to their measurements. Now assume that you have the
measurements of the iris flowers according to their species, and here your
task is to train a machine learning model that can learn from the
measurements of the iris species and classify them.
Although the Scikit-learn library provides a dataset for iris flower
classification, you can also download the same dataset from here for the task
of iris flower classification with Machine Learning. 

************CODE***********
# Step 1: Import Libraries
import pandas as pd
import seaborn as sns
import matplotlib.pyplot as plt
from sklearn.model_selection import train_test_split
from sklearn.preprocessing import LabelEncoder
from sklearn.linear_model import LogisticRegression
from sklearn.metrics import accuracy_score, classification_report, confusion_matrix

# Step 2: Load Dataset
data = pd.read_csv("iris.csv")
data = iris.frame
data['species'] = data['target'].map({0:'setosa', 1:'versicolor', 2:'virginica'})
data.drop("target", axis=1, inplace=True)
print("Dataset Preview:\n", data.head())
# Step 3: Data Visualization
sns.pairplot(data, hue="species")
plt.show()
sns.heatmap(data.drop("species", axis=1).corr(), annot=True, cmap="coolwarm")
plt.title("Feature Correlation Heatmap")
plt.show()
# Step 4: Prepare Data
X = data.drop("species", axis=1)   # Features
y = data["species"]                # Target
# Encode target labels
le = LabelEncoder()
y = le.fit_transform(y)

# Train/Test Split
X_train, X_test, y_train, y_test = train_test_split(
    X, y, test_size=0.2, random_state=42
)

# Step 5: Train Model
model = LogisticRegression(max_iter=200)
model.fit(X_train, y_train)

# Step 6: Make Predictions
y_pred = model.predict(X_test)

# Step 7: Evaluate Model
print(" Model Evaluation")
print("Accuracy:", accuracy_score(y_test, y_pred))
print("\nClassification Report:\n", classification_report(y_test, y_pred, target_names=le.classes_))

# Confusion Matrix
cm = confusion_matrix(y_test, y_pred)
sns.heatmap(cm, annot=True, fmt="d", cmap="Blues", xticklabels=le.classes_, yticklabels=le.classes_)
plt.xlabel("Predicted")
plt.ylabel("Actual")
plt.title("Confusion Matrix")
plt.show()

****************output**************
   sepal length (cm)  sepal width (cm)  petal length (cm)  petal width (cm) species
0                5.1               3.5                1.4               0.2  setosa
1                4.9               3.0                1.4               0.2  setosa
2                4.7               3.2                1.3               0.2  setosa
3                4.6               3.1                1.5               0.2  setosa
4                5.0               3.6                1.4               0.2  setosa

             Predicted
Actual    setosa  versicolor  virginica
setosa       10          0          0
versicolor    0          9          0
virginica     0          0         11

âœ… Model Evaluation
Accuracy: 1.0

Classification Report:
              precision    recall  f1-score   support

      setosa       1.00      1.00      1.00        10
  versicolor       1.00      1.00      1.00         9
   virginica       1.00      1.00      1.00        11

    accuracy                           1.00        30
   macro avg       1.00      1.00      1.00        30
weighted avg       1.00      1.00      1.00        30
