TASK 5:
Sales prediction means predicting how much of a product people will buy
based on factors such as the amount you spend to advertise your product,
the segment of people you advertise for, or the platform you are
advertising on about your product.
Typically, a product and service-based business always need their Data
Scientist to predict their future sales with every step they take to
manipulate the cost of advertising their product. So let’s start the task of
sales prediction with machine learning using Python.

***************code****************
# Step 1: Import Libraries
import pandas as pd
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from sklearn.model_selection import train_test_split
from sklearn.linear_model import LinearRegression
from sklearn.metrics import mean_squared_error, r2_score
# Step 2: Load Dataset
# Replace "sales.csv" with your dataset path
data = pd.read_csv("sales.csv")
# Step 3: Explore Data
print(data.head())
print(data.info())
print(data.describe())
# Visualize relationships
sns.pairplot(data)
plt.show()
# Step 4: Features and Target
# Assuming dataset has 'TV', 'Radio', 'Newspaper' (advertising spends) as features
# and 'Sales' as target variable
X = data[['TV', 'Radio', 'Newspaper']]
y = data['Sales']
# Step 5: Train/Test Split
X_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.2, random_state=42)
# Step 6: Train Model
model = LinearRegression()
model.fit(X_train, y_train)
# Step 7: Predictions
y_pred = model.predict(X_test)
# Step 8: Evaluation
print("Mean Squared Error:", mean_squared_error(y_test, y_pred))
print("R² Score:", r2_score(y_test, y_pred))
# Visualize Predictions
plt.scatter(y_test, y_pred, color="blue")
plt.xlabel("Actual Sales")
plt.ylabel("Predicted Sales")
plt.title("Actual vs Predicted Sales")
plt.show()

***********output***************
      TV  Radio  Newspaper  Sales
0  230.1   37.8       69.2   22.1
1   44.5   39.3       45.1   10.4
2   17.2   45.9       69.3    9.3
3  151.5   41.3       58.5   18.5
4  180.8   10.8       58.4   12.9

<class 'pandas.core.frame.DataFrame'>
RangeIndex: 200 entries, 0 to 199
Data columns (total 4 columns):
 #   Column     Non-Null Count  Dtype  
---  ------     --------------  -----  
 0   TV         200 non-null    float64
 1   Radio      200 non-null    float64
 2   Newspaper  200 non-null    float64
 3   Sales      200 non-null    float64
dtypes: float64(4)
memory usage: 6.4 KB
               TV       Radio   Newspaper       Sales
count  200.000000  200.000000  200.000000  200.000000
mean   147.042500   23.264000   30.554000   14.022500
std     85.854236   14.846809   21.778621    5.217457
min      0.700000    0.000000    0.300000    1.600000
25%     74.375000    9.975000   12.750000   10.375000
50%    149.750000   22.900000   25.750000   12.900000
75%    218.825000   36.525000   45.100000   17.400000
max    296.400000   49.600000  114.000000   27.000000

Mean Squared Error: 2.784126314510936

R² Score: 0.897210638178952
