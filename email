TASK 4:
We’ve all been the recipient of spam emails before. Spam mail, or junk mail,
is a type of email that is sent to a massive number of users at one time,
frequently containing cryptic messages, scams, or most dangerously,
phishing content.
In this Project, use Python to build an email spam detector. Then, use
machine learning to train the spam detector to recognize and classify
emails into spam and non-spam. Let’s get started!

*************CODE***************

# Step 1: Import Libraries
import pandas as pd
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from sklearn.model_selection import train_test_split
from sklearn.feature_extraction.text import TfidfVectorizer
from sklearn.naive_bayes import MultinomialNB
from sklearn.metrics import accuracy_score, confusion_matrix, classification_report
# Step 2: Load Dataset
# Dataset example: "spam.csv" (with columns: 'label', 'message')
data = pd.read_csv("spam.csv", encoding="latin-1")[['v1', 'v2']]
data.columns = ['label', 'message']
print(data.head())
# Step 3: Preprocess Data
data['label'] = data['label'].map({'ham':0, 'spam':1})  # ham=0, spam=1
# Step 4: Feature Extraction (TF-IDF)
vectorizer = TfidfVectorizer(stop_words='english')
X = vectorizer.fit_transform(data['message'])
y = data['label']
# Step 5: Train/Test Split
X_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.2, random_state=42)
# Step 6: Train Model (Naive Bayes)
model = MultinomialNB()
model.fit(X_train, y_train)
# Step 7: Predictions & Evaluation
y_pred = model.predict(X_test)
print("Accuracy:", accuracy_score(y_test, y_pred))
print("\nClassification Report:\n", classification_report(y_test, y_pred))
# Confusion Matrix
cm = confusion_matrix(y_test, y_pred)
sns.heatmap(cm, annot=True, fmt="d", cmap="Blues", xticklabels=["Ham","Spam"], yticklabels=["Ham","Spam"])
plt.xlabel("Predicted")
plt.ylabel("Actual")
plt.title("Confusion Matrix")
plt.show()
# Step 8: Test with new emails
sample_emails = [
    "Congratulations! You have won $1000 cash. Claim now!",
    "Hi, can we meet tomorrow for the project discussion?"
]
sample_features = vectorizer.transform(sample_emails)
predictions = model.predict(sample_features)
for email, label in zip(sample_emails, predictions):
    print(f"Email: {email} --> {'Spam' if label == 1 else 'Ham'}")

**********OUTPUT*************
Accuracy: 0.97

Classification Report:
              precision    recall  f1-score   support

           0       0.98      0.99      0.98       965
           1       0.93      0.90      0.92       150

    accuracy                           0.97      1115
   macro avg       0.95      0.94      0.95      1115
weighted avg       0.97      0.97      0.97      1115

Email: Congratulations! You have won $1000 cash. Claim now! --> Spam
Email: Hi, can we meet tomorrow for the project discussion? --> Ham

